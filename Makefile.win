ABSEIL_CPP_VERSION = lts_2024_01_16
GRPC_VERSION = v1.62.1
OPENSSL_VERSION = 3.2.1
GOOGLE_CLOUD_CPP_VERSION = v2.22.0

BUILD_DIR = $(MAKEDIR)\build
INSTALL_PREFIX = $(MAKEDIR)\install
CMAKE_CXX_STANDARD = 17

!IFNDEF NPROC
NPROC = 2
!ENDIF

!IFNDEF CMAKE_GENERATOR_TYPE
CMAKE_GENERATOR_TYPE=Ninja
!ENDIF

!IF "$(MSBUILD_PLATFORM)" == "ARM64"
CMAKE_CONFIGURE_FLAGS=-G "$(CMAKE_GENERATOR_TYPE)" -D CMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_OBJECT_PATH_MAX=32760 -A "$(MSBUILD_PLATFORM)"
!ELSE
CMAKE_CONFIGURE_FLAGS=-G "$(CMAKE_GENERATOR_TYPE)" -D CMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_OBJECT_PATH_MAX=32760
!ENDIF

THRID_PARTY_DIR = $(MAKEDIR)\third_party

ABSEIL_CPP_GIT_REPO = https://github.com/abseil/abseil-cpp.git
ABSEIL_CPP_SRC_DIR = $(THRID_PARTY_DIR)\abseil-cpp
ABSEIL_CPP_BUILD_DIR = $(BUILD_DIR)\abseil-cpp
ABSEIL_CPP_CONFIG_CMAKE = $(INSTALL_PREFIX)\lib\cmake\absl\abslConfig.cmake

NLOHMANN_JSON_VERSION = 3.11.3
NLOHMANN_JSON_BASE_URL = https://github.com/nlohmann/json/releases/download
NLOHMANN_JSON_TARBALL_URL = $(NLOHMANN_JSON_BASE_URL)/v$(NLOHMANN_JSON_VERSION)/json.tar.xz
NLOHMANN_JSON_TARBALL = $(THRID_PARTY_DIR)\nlohmann-json-$(NLOHMANN_JSON_VERSION).tar
NLOHMANN_JSON_TARBALL_XZ = $(NLOHMANN_JSON_TARBALL).xz
NLOHMANN_JSON_SRC_DIR = $(THRID_PARTY_DIR)\nlohmann-json-$(NLOHMANN_JSON_VERSION)
NLOHMANN_JSON_BUILD_DIR = $(BUILD_DIR)\nlohmann_json
NLOHMANN_JSON_CONFIG_CMAKE = $(INSTALL_PREFIX)\share\cmake\nlohmann_json\nlohmann_jsonConfig.cmake

LIBCURL_VERSION = 8.7.1
LIBCURL_BUILD = 7
LIBCURL_VERSION_BUILD = $(LIBCURL_VERSION)_$(LIBCURL_BUILD)
LIBCURL_BASE_URL = https://curl.se/windows
LIBCURL_INSTALL_DIR = $(INSTALL_PREFIX)\libcurl
!IF "$(MSBUILD_PLATFORM)" == "ARM64"
LIBCURL_ZIP_FILENAME = curl-$(LIBCURL_VERSION_BUILD)-win64a-mingw
LIBCURL_DLL = $(LIBCURL_INSTALL_DIR)\bin\libcurl-arm64.dll
!ELSE
LIBCURL_ZIP_FILENAME = curl-$(LIBCURL_VERSION_BUILD)-win64-mingw
LIBCURL_DLL = $(LIBCURL_INSTALL_DIR)\bin\libcurl-x64.dll
!ENDIF
LIBCURL_ZIP_FILE = $(THRID_PARTY_DIR)\$(LIBCURL_ZIP_FILENAME).zip
LIBCURL_ZIP_URL = $(LIBCURL_BASE_URL)/dl-$(LIBCURL_VERSION_BUILD)/$(LIBCURL_ZIP_FILENAME).zip

GRPC_GIT_REPO = https://github.com/grpc/grpc.git
GRPC_SRC_DIR = $(THRID_PARTY_DIR)\grpc
GRPC_BUILD_DIR = $(BUILD_DIR)\grpc
GRPC_CONFIG_CMAKE = $(INSTALL_PREFIX)\lib\cmake\grpc\gRPCConfig.cmake

OPENSSL_PRECOMPILED_BASE_URL=https://github.com/cocoa-xu/openssl-build/releases/download/v$(OPENSSL_VERSION)
!IF "$(MSBUILD_PLATFORM)" == "ARM64"
OPENSSL_PRECOMPILED_URL=$(OPENSSL_PRECOMPILED_BASE_URL)/openssl-static-aarch64-windows-msvc.tar.gz
OPENSSL_PRECOMPILED_TARBALL=$(THRID_PARTY_DIR)\openssl-static-aarch64-windows-msvc.tar.gz
!ELSE
OPENSSL_PRECOMPILED_URL=$(OPENSSL_PRECOMPILED_BASE_URL)/openssl-static-x86_64-windows-msvc.tar.gz
OPENSSL_PRECOMPILED_TARBALL=$(THRID_PARTY_DIR)\openssl-static-x86_64-windows-msvc.tar.gz
!ENDIF

GOOGLE_CLOUD_CPP_GIT_REPO = https://github.com/googleapis/google-cloud-cpp.git
GOOGLE_CLOUD_CPP_SRC_DIR = $(THRID_PARTY_DIR)\google-cloud-cpp
GOOGLE_CLOUD_CPP_BUILD_DIR = $(BUILD_DIR)\google-cloud-cpp
GOOGLE_CLOUD_CPP_BIGQUERY_CONFIG_CMAKE = $(INSTALL_PREFIX)\lib\cmake\google_cloud_cpp_bigquery\google_cloud_cpp_bigquery-config.cmake

build: nproc $(THRID_PARTY_DIR) build-deps
	@ echo "Build done"

nproc:
	@ echo "Parallel Jobs: $(NPROC)"

$(THRID_PARTY_DIR):
	@ if not exist "$(THRID_PARTY_DIR)" mkdir "$(THRID_PARTY_DIR)"

build-deps: unarchive-libcurl $(ABSEIL_CPP_CONFIG_CMAKE) $(NLOHMANN_JSON_CONFIG_CMAKE) $(GRPC_CONFIG_CMAKE) install-openssl $(GOOGLE_CLOUD_CPP_BIGQUERY_CONFIG_CMAKE)

fetch-abseil-cpp:
	@ if not exist "$(ABSEIL_CPP_SRC_DIR)" ( \
		git clone --depth=1 --branch $(ABSEIL_CPP_VERSION) $(ABSEIL_CPP_GIT_REPO) "$(ABSEIL_CPP_SRC_DIR)" \
    )

config-abseil-cpp: fetch-abseil-cpp
	@ if not exist "$(ABSEIL_CPP_CONFIG_CMAKE)" ( \
		cd "$(ABSEIL_CPP_SRC_DIR)" && \
		cmake -S . -B "$(ABSEIL_CPP_BUILD_DIR)" \
			-D CMAKE_BUILD_TYPE=Release \
			-D CMAKE_INSTALL_PREFIX="$(INSTALL_PREFIX)" \
			-D CMAKE_CXX_STANDARD=$(CMAKE_CXX_STANDARD) \
			-D ABSL_PROPAGATE_CXX_STD=ON \
            -D CMAKE_MSVC_RUNTIME_LIBRARY="MultiThreadedDLL" \
            $(CMAKE_CONFIGURE_FLAGS) \
	)

install-abseil-cpp: config-abseil-cpp
	@ if not exist "$(ABSEIL_CPP_CONFIG_CMAKE)" ( \
		cmake --build "$(ABSEIL_CPP_BUILD_DIR)" --config Release --target install --parallel $(NPROC) \
    )

$(ABSEIL_CPP_CONFIG_CMAKE): install-abseil-cpp

fetch-nlohmann-json:
	@ if not exist "$(NLOHMANN_JSON_TARBALL_XZ)" ( \
		powershell -command "(New-Object Net.WebClient).DownloadFile('$(NLOHMANN_JSON_TARBALL_URL)','$(NLOHMANN_JSON_TARBALL_XZ)')" \
	)

unarchive-nlohmann-json: fetch-nlohmann-json
	@ if not exist "$(NLOHMANN_JSON_SRC_DIR)" ( \
		mkdir "$(NLOHMANN_JSON_SRC_DIR)" && \
		cd "$(THRID_PARTY_DIR)" && \
		7z x "$(NLOHMANN_JSON_TARBALL_XZ)" && \
		dir && \
		tar -xf "$(NLOHMANN_JSON_TARBALL)" -C "$(NLOHMANN_JSON_SRC_DIR)" --strip-components=1 \
	)

config-nlohmann-json: unarchive-nlohmann-json
	@ if not exist "$(NLOHMANN_JSON_BUILD_DIR)" ( \
		cmake -S "$(NLOHMANN_JSON_SRC_DIR)" -B "$(NLOHMANN_JSON_BUILD_DIR)" \
			-D CMAKE_BUILD_TYPE=Release \
			-D CMAKE_INSTALL_PREFIX="$(INSTALL_PREFIX)" \
			-D CMAKE_CXX_STANDARD=$(CMAKE_CXX_STANDARD)	\
			-D JSON_BuildTests=OFF \
			-D CMAKE_MSVC_RUNTIME_LIBRARY="MultiThreadedDLL" \
			$(CMAKE_CONFIGURE_FLAGS) \
	)

install-nlohmann-json: config-nlohmann-json
	if not exist "$(NLOHMANN_JSON_CONFIG_CMAKE)" ( \
		cmake --build "$(NLOHMANN_JSON_BUILD_DIR)" --config Release --target install --parallel $(NPROC) \
	)

$(NLOHMANN_JSON_CONFIG_CMAKE): install-nlohmann-json

fetch-libcurl:
	@ if not exist "$(LIBCURL_ZIP_FILE)" ( \
		powershell -command "(New-Object Net.WebClient).DownloadFile('$(LIBCURL_ZIP_URL)','$(LIBCURL_ZIP_FILE)')" \
	)

unarchive-libcurl: fetch-libcurl
	@ if not exist "$(LIBCURL_DLL)" ( \
		cd "$(INSTALL_PREFIX)" && \
		7z x "$(LIBCURL_ZIP_FILE)" && \
		powershell -command Move-Item -Path "$(LIBCURL_ZIP_FILENAME)" -Destination "libcurl" && \
		dir libcurl \
	)

fetch-grpc:
    @ if not exist "$(GRPC_SRC_DIR)" ( \
        git clone $(GRPC_GIT_REPO) "$(GRPC_SRC_DIR)" \
    )

config-grpc: fetch-grpc
	@ if not exist "$(GRPC_CONFIG_CMAKE)" ( \
		cd "$(GRPC_SRC_DIR)" && \
		git submodule update --init && \
		cmake -S . -B "$(GRPC_BUILD_DIR)" \
			-D CMAKE_BUILD_TYPE=Release \
			-D CMAKE_INSTALL_PREFIX="$(INSTALL_PREFIX)" \
			-D CMAKE_CXX_STANDARD=$(CMAKE_CXX_STANDARD)	\
			-D ABSL_PROPAGATE_CXX_STD=ON \
            -D CMAKE_MSVC_RUNTIME_LIBRARY="MultiThreadedDLL" \
            $(CMAKE_CONFIGURE_FLAGS) \
    )

install-grpc: config-grpc
    @ if not exist "$(GRPC_CONFIG_CMAKE)" ( \
        cmake --build "$(GRPC_BUILD_DIR)" --config Release --target install --parallel $(NPROC) \
    )

$(GRPC_CONFIG_CMAKE): install-grpc

fetch-openssl:
    @ if not exist "$(OPENSSL_PRECOMPILED_TARBALL)" ( \
        powershell -command "(New-Object Net.WebClient).DownloadFile('$(OPENSSL_PRECOMPILED_URL)','$(OPENSSL_PRECOMPILED_TARBALL)')" \
    )

install-openssl: fetch-openssl
    @ if not exist "$(INSTALL_PREFIX)\openssl" ( \
        mkdir "$(INSTALL_PREFIX)\openssl" && \
        tar -xf "$(OPENSSL_PRECOMPILED_TARBALL)" -C "$(INSTALL_PREFIX)\openssl" \
    )

fetch-google-cloud-cpp:
	@ if not exist "$(GOOGLE_CLOUD_CPP_SRC_DIR)" ( \
		git clone --depth=1 --branch $(GOOGLE_CLOUD_CPP_VERSION) $(GOOGLE_CLOUD_CPP_GIT_REPO) "$(GOOGLE_CLOUD_CPP_SRC_DIR)" \
    )

config-google-cloud-cpp: fetch-google-cloud-cpp
    @ if not exist "$(GOOGLE_CLOUD_CPP_BIGQUERY_CONFIG_CMAKE)" ( \
		cd "$(GOOGLE_CLOUD_CPP_SRC_DIR)" && \
		cmake -S . -B "$(GOOGLE_CLOUD_CPP_BUILD_DIR)" \
			-D CMAKE_BUILD_TYPE=Release \
			-D CMAKE_INSTALL_PREFIX="$(INSTALL_PREFIX)" \
			-D CMAKE_CXX_STANDARD=$(CMAKE_CXX_STANDARD)	\
			-D CMAKE_PREFIX_PATH="$(INSTALL_PREFIX)/lib/cmake" \
			-D OPENSSL_ROOT_DIR="$(INSTALL_PREFIX)/openssl" \
			-D BUILD_TESTING=OFF \
			-D GOOGLE_CLOUD_CPP_ENABLE_EXAMPLES=OFF \
			-D GOOGLE_CLOUD_CPP_ENABLE=bigquery,experimental-bigquery_rest \
			-D CMAKE_MSVC_RUNTIME_LIBRARY="MultiThreadedDLL" \
			-D CURL_LIBRARY="$(LIBCURL_DLL)" \
			-D CURL_INCLUDE_DIR="$(LIBCURL_INSTALL_DIR)/include" \
            $(CMAKE_CONFIGURE_FLAGS) \
    )

install-google-cloud-cpp: config-google-cloud-cpp
	@ if not exist "$(GOOGLE_CLOUD_CPP_BIGQUERY_CONFIG_CMAKE)" ( \
		cmake --build "$(GOOGLE_CLOUD_CPP_BUILD_DIR)" --config Release --target install --parallel $(NPROC) \
    )

$(GOOGLE_CLOUD_CPP_BIGQUERY_CONFIG_CMAKE): install-google-cloud-cpp
